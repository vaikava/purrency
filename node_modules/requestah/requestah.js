"use strict";

var http = require('http'),
    querystring = require('querystring'),
    url = require('url');

var Requestah = function (port) { this.port = port || 80; };

// Proxy methods
Requestah.prototype.get = function (uri, params, callback) { return this.request('GET', uri, params, callback); };
Requestah.prototype.post = function (uri, params, callback) { return this.request('POST', uri, params, callback); };
Requestah.prototype.put = function (uri, params, callback) { return this.request('PUT', uri, params, callback); };
Requestah.prototype.del = function (uri, params, callback) { return this.request('DELETE', uri, params, callback); };

/**
 * Perform the request
 * 
 * @param method   string
 * @param url      string   Relative to root ie. '/users'
 * @param params   object   Consisting of params to send along with the request, as well as nested headers & type:
 *                           {headers: {...}} and nested {type: 'form'} or {type: 'json'}
 * @param callback function Callback method
 */
Requestah.prototype.request = function (method, uri, params, callback) {

    // Allow shortcalling
    if (typeof (callback) === 'undefined') { callback = params; }
    
    // Set up our options
    var options = {
        port: this.port,
        method: method || 'GET',
        headers: {}
    };

    // Parse URI and append the bits to the options obj.
    var uri = url.parse(uri, true);
    if (uri.hostname) { options.host = uri.host;}
    options.path = uri.path;

    // Delete headers from params.
    if (params.headers) { options.headers = params.headers; }
    delete params.headers;

    // For HTTP POST & PUT: Allow 
    if (params && method !== 'GET') {

        if (!params.type || params.type === 'json') {
            delete params.type;
            params = JSON.stringify(params);
            options.headers['Content-Type'] = 'application/json';
        } else if (params.type === 'form') {
            delete params.type;
            params = querystring.stringify(params);
            options.headers['Content-Type'] = 'application/x-www-form-urlencoded';
        }
    }

    // Append params to the URL if we're performing a HTTP GET
    if (params && method === 'GET') {
        delete params.type;
        options.path += '?' + querystring.stringify(params);
    }

    // Create the request
    var req = http.request(options);
    if (params && method !== 'GET') { req.write(params); }

    // Fetch response and invoke callback
    req.on('response', function (res) {

        res.body = '';
        res.setEncoding('utf-8');

        // Append chunks
        res.on('data', function (chunk) { res.body += chunk; });

        // Invoke callback with response
        res.on('end', function () { callback(res); });

    });

    // End our response
    req.end();
}

module.exports = Requestah; 